# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
## additionally:
# we turn on the daemon, which will take over some of the work
org.gradle.daemon=true
# if the project is multi-module, then now the module configuration will be only
# if it is necessary to run the task
org.gradle.configureondemand=true
# using a task from the cache, if possible
org.gradle.caching=true
# enabling the incremental mode for Kotlin annotations
kapt.incremental.apt=true
# enables file system browsing. when enabled, it allows Gradle to store what it has learned about
# the file system in memory between builds, instead of polling the file system at each build.
org.gradle.vfs.watch=true
#
android.enableJetifier=false
# disables the generation of different build classes in modules.
# This way we save time where, for example, there are no BuildConfig classes.
android.defaults.buildfeatures.buildconfig=false
android.defaults.buildfeatures.aidl=false
android.defaults.buildfeatures.renderscript=false
android.defaults.buildfeatures.resvalues=false
android.defaults.buildfeatures.shaders=false